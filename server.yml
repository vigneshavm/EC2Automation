---
-
  connection: local
  hosts: localhost
  name: "Provision an EC2 Instance"
  become: true
  become_user: root
  gather_facts: True

  vars_files:
        - conf/group_vars/conf.yml


  tasks:
    -
      local_action:
        description: "Security Group for  Servers"
        module: ec2_group
        name: "{{ security_group_all }}"
        region: "{{ region }}"
        rules:
          -
            cidr_ip: 0.0.0.0/0
            from_port: 80
            proto: tcp
            to_port: 80

          -
            cidr_ip: 0.0.0.0/0
            from_port: 22
            proto: tcp
            to_port: 22

          -
            cidr_ip: 0.0.0.0/0
            from_port: 27017
            proto: tcp
            to_port: 27017
            
          -
            cidr_ip: 0.0.0.0/0
            from_port: 8800
            proto: tcp
            to_port: 8806

        rules_egress:
          -
            cidr_ip: 0.0.0.0/0
            proto: all
      name: "Create a security group"
      register: allInOne_security_group


#      allInOne started
    -
      local_action:
        count: "{{ count }}"
        group_id: "{{ allInOne_security_group.group_id }}"
        instance_type: "{{ instance_type }}"
        region: "{{ region }}"
        image: "{{ image }}"
        wait: true
        key_name: "{{ keypair }}"
        module: ec2
      name: "Create a Instance (allInOne)"
      register: ec2

    - name: Save host data (allInOne)
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: webInstance
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH for instances (allInOne)
      wait_for:
        delay: 1
        host: "{{ item.public_ip }}"
        port: 22
        state: started
        timeout: 30
      with_items: "{{ ec2.instances }}"

    - name: Add tag to (allInOne)
      ec2_tag:
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: present
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Name: webInstance
#      allInOne end


#connection allInOne start

-
  hosts: webInstance
  name: "launched an EC2 Instance - allInOne "
  become: false
  become_user: ubuntu
  gather_facts: True

  vars:
    ansible_ssh_private_key_file: "/home/ubuntu/stageNeols.pem"

  vars_files:

      - conf/group_vars/conf.yml
      - environments/{{ env }}/group_vars/route53.yml

  roles:
      - { role: instanceToReady }
      - { role: database }
      - { role: ec2 }
      - { role: startProject }
      - { role: nginx }

#connection allInOne end
